// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

var Mocha      = require("mocha");
var Assert     = require("assert");
var Helpers    = require("../helpers.js");
var Caml_obj   = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function koans() {
  Mocha.describe("Comparison Operators", function () {
        Mocha.it("== tests for equality", function () {
              Assert.ok(+(1 === Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("!= tests for inequality", function () {
              Assert.ok(+(1 !== Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("< tests for less than", function () {
              Assert.ok(+(1 < Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("> tests for greater than", function () {
              Assert.ok(+(2 > Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("<= tests for less than or equal", function () {
              Assert.ok(+(1 <= Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it(">= tests for greater than or equal", function () {
              Assert.ok(+(2 >= Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("floats are comparable", function () {
              Assert.ok(+(1.0 < Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("strings are comparable", function () {
              Assert.ok(+("1" === Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("chars are comparable", function () {
              Assert.ok(+(/* "1" */49 === Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("max returns the max of two args", function () {
              Assert.equal(Helpers.__(/* () */0), Pervasives.max(1, 2));
              return /* () */0;
            });
        Mocha.it("min returns the max of two args", function () {
              Assert.equal(Helpers.__(/* () */0), Pervasives.min(1, 2));
              return /* () */0;
            });
        Mocha.it("compare returns -1 for LT, 0 for EQ and 1 for GT", function () {
              Assert.equal(Helpers.__(/* () */0), Caml_obj.caml_int_compare(1, 2));
              return /* () */0;
            });
        return /* () */0;
      });
  return /* () */0;
}

exports.koans = koans;
/* mocha Not a pure module */
