// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

var Bopt     = require("bs-containers/lib/js/src/bopt.js");
var Mocha    = require("mocha");
var Assert   = require("assert");
var Helpers  = require("../helpers.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function koans() {
  Mocha.describe("Option", function () {
        Mocha.it("maybe represents a value that may be nothing", function () {
              Assert.ok(Caml_obj.caml_equal(/* None */0, Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("or the value could be something", function () {
              Assert.ok(Caml_obj.caml_equal(/* Some */[5], /* Some */[Helpers.__(/* () */0)]));
              return /* () */0;
            });
        Mocha.it("withDefault can be used to get the value from a maybe", function () {
              Assert.ok(Caml_obj.caml_equal(Bopt.getOr(3, /* Some */[5]), Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("but will give the default value if there is nothing", function () {
              Assert.ok(Caml_obj.caml_equal(Bopt.getOr(3, /* None */0), Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("map will transform the value in a maybe", function () {
              Assert.ok(Caml_obj.caml_equal(Bopt.map(function (n) {
                            return n / 2 | 0;
                          }, /* Some */[4]), /* Some */[Helpers.__(/* () */0)]));
              return /* () */0;
            });
        Mocha.it("but will not transform a nothing", function () {
              Assert.ok(Caml_obj.caml_equal(Bopt.map(function (n) {
                            return n / 2 | 0;
                          }, /* None */0), Helpers.__(/* () */0)));
              return /* () */0;
            });
        return /* () */0;
      });
  return /* () */0;
}

exports.koans = koans;
/* mocha Not a pure module */
