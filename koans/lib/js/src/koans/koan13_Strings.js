// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

var Mocha   = require("mocha");
var Assert  = require("assert");
var Bstring = require("bs-containers/lib/js/src/bstring.js");
var Helpers = require("../helpers.js");

function koans() {
  Mocha.describe("Strings", function () {
        Mocha.it("length returns the string length", function () {
              Assert.equal(Bstring.length("Hello"), Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("reverse returns the reverse of a string", function () {
              Assert.equal(Bstring.rev("Hello"), Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("repeat returns the string repeated n times", function () {
              Assert.equal(Bstring.repeat("ya", 2), Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("the ^ infix function appends two strings", function () {
              Assert.equal("ReasonML", Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("concat appends a list of strings together, interpolated with a separator", function () {
              Assert.equal(Bstring.concat(" ", /* :: */[
                        "ReasonML",
                        /* :: */[
                          "Lang",
                          /* :: */[
                            "Yay!",
                            /* [] */0
                          ]
                        ]
                      ]), Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("slice gets a substring", function () {
              Assert.equal(Bstring.sub("I'm a string", 4, 12), Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("negative indices start from the end", function () {
              Assert.equal(Bstring.sub("I'm a string", -8, -1), Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("left takes the first n characters of a string", function () {
              Assert.equal(Bstring.take(3, "I'm a string"), Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("dropLeft drops the first n characters of a string", function () {
              Assert.equal(Bstring.drop(3, "I'm a string"), Helpers.__(/* () */0));
              return /* () */0;
            });
        Mocha.it("find looks for a substring, returning the index of it's place, or -1", function () {
              Assert.equal(Bstring.find(/* Some */[0], "string")("I'm a string"), Helpers.__(/* () */0));
              return /* () */0;
            });
        return /* () */0;
      });
  return /* () */0;
}

exports.koans = koans;
/* mocha Not a pure module */
