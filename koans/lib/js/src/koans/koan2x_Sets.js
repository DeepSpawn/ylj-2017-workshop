// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

var Bset     = require("bs-containers/lib/js/src/bset.js");
var Curry    = require("bs-platform/lib/js/curry.js");
var Mocha    = require("mocha");
var Bfloat   = require("bs-containers/lib/js/src/bfloat.js");
var Assert   = require("assert");
var Bstring  = require("bs-containers/lib/js/src/bstring.js");
var Helpers  = require("../helpers.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

var compare = Caml_obj.caml_compare;

var ISet = Bset.Make(/* module */[/* compare */compare]);

function koans() {
  Mocha.describe("Sets", function () {
        Mocha.it("Set.Make is a module functor that takes an OrderedType", function () {
              Bset.Make([Bstring.compare]);
              Assert.ok(/* true */1);
              return /* () */0;
            });
        Mocha.it("Set.Make takes any module with { type: t, compare: t => t => int }", function () {
              Bset.Make([Bfloat.compare]);
              Assert.ok(/* true */1);
              return /* () */0;
            });
        Mocha.it("Set.Make can take any module that obeys that interface", function () {
              var compare = Caml_obj.caml_compare;
              Bset.Make(/* module */[/* compare */compare]);
              Assert.ok(/* true */1);
              return /* () */0;
            });
        Mocha.it("can be created empty", function () {
              Assert.ok(Curry._2(ISet[/* equal */10], ISet[/* empty */0], Helpers.__(/* () */0)));
              return /* () */0;
            });
        Mocha.it("can be created from a list", function () {
              Assert.ok(Curry._2(ISet[/* equal */10], Curry._2(ISet[/* add */3], 1, ISet[/* empty */0]), Curry._1(ISet[/* of_list */28], Helpers.__(/* () */0))));
              return /* () */0;
            });
        Mocha.it("can be created of one element", function () {
              Assert.ok(Curry._2(ISet[/* equal */10], Curry._1(ISet[/* of_list */28], /* :: */[
                            1,
                            /* [] */0
                          ]), Curry._1(ISet[/* singleton */4], Helpers.__(/* () */0))));
              return /* () */0;
            });
        Mocha.it("will not add duplicate elements", function () {
              Assert.ok(Curry._2(ISet[/* equal */10], Curry._1(ISet[/* of_list */28], /* :: */[
                            1,
                            /* :: */[
                              1,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* :: */[
                                    4,
                                    /* :: */[
                                      4,
                                      /* :: */[
                                        5,
                                        /* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]), Curry._1(ISet[/* of_list */28], Helpers.__(/* () */0))));
              return /* () */0;
            });
        Mocha.it("you can add elements to a set", function () {
              Assert.ok(Curry._2(ISet[/* equal */10], Curry._1(ISet[/* of_list */28], /* :: */[
                            1,
                            /* [] */0
                          ]), Curry._2(ISet[/* add */3], Helpers.__(/* () */0), ISet[/* empty */0])));
              return /* () */0;
            });
        Mocha.it("but duplicates will not be added", function () {
              Assert.ok(Curry._2(ISet[/* equal */10], Curry._1(ISet[/* of_list */28], /* :: */[
                            1,
                            /* :: */[
                              2,
                              /* :: */[
                                3,
                                /* [] */0
                              ]
                            ]
                          ]), Curry._2(ISet[/* add */3], Helpers.__(/* () */0), Curry._1(ISet[/* of_list */28], /* :: */[
                                1,
                                /* :: */[
                                  2,
                                  /* :: */[
                                    3,
                                    /* [] */0
                                  ]
                                ]
                              ]))));
              return /* () */0;
            });
        Mocha.it("remove may subtract an element from a set", function () {
              Assert.ok(Curry._2(ISet[/* equal */10], Curry._1(ISet[/* of_list */28], /* :: */[
                            1,
                            /* :: */[
                              2,
                              /* [] */0
                            ]
                          ]), Curry._2(ISet[/* remove */5], Helpers.__(/* () */0), Curry._1(ISet[/* of_list */28], /* :: */[
                                1,
                                /* :: */[
                                  2,
                                  /* :: */[
                                    3,
                                    /* [] */0
                                  ]
                                ]
                              ]))));
              return /* () */0;
            });
        Mocha.it("remove is a no op if the element isn't in the set", function () {
              Assert.ok(Curry._2(ISet[/* equal */10], Curry._1(ISet[/* of_list */28], /* :: */[
                            1,
                            /* :: */[
                              2,
                              /* :: */[
                                3,
                                /* [] */0
                              ]
                            ]
                          ]), Curry._2(ISet[/* remove */5], Helpers.__(/* () */0), Curry._1(ISet[/* of_list */28], /* :: */[
                                1,
                                /* :: */[
                                  2,
                                  /* :: */[
                                    3,
                                    /* [] */0
                                  ]
                                ]
                              ]))));
              return /* () */0;
            });
        Mocha.it("member can check if an element is in a set", function () {
              Assert.ok(Curry._2(ISet[/* mem */2], Helpers.__(/* () */0), Curry._1(ISet[/* of_list */28], /* :: */[
                            1,
                            /* :: */[
                              2,
                              /* :: */[
                                3,
                                /* [] */0
                              ]
                            ]
                          ])));
              return /* () */0;
            });
        return /* () */0;
      });
  return /* () */0;
}

exports.ISet  = ISet;
exports.koans = koans;
/* ISet Not a pure module */
